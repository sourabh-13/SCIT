<?php
namespace App\Http\Controllers\frontEnd;
use App\Http\Controllers\frontEnd\ServiceUserManagementController;
use Illuminate\Http\Request;
use DB, Auth;
use App\Policies, App\User, App\UserAcceptedPolicy;

class PoliciesController extends ServiceUserManagementController
{
    public function index()
    {
        $user_id = Auth::user()->id;
        $home_id = Auth::user()->home_id;

        $logged_plans = Policies::
            with([
                'accept_policy'=> function($query){
                    $query->where('user_id',Auth::user()->id); 
                }
            ])
            ->select('id','file')->where('home_id',$home_id)->where('is_deleted',0)->orderBy('id','desc');
     
        $search = '';
        $records_limit = '10';
        
        if(isset($_GET['search'])) {  

            if( (!empty($_GET['search'])) ) { 
                $logged_files = $logged_plans->where('file','like','%'.$_GET['search'].'%')->where('home_id',$home_id)->paginate($records_limit);          
            }                           
        } else  {
            $logged_files = $logged_plans->paginate($records_limit);
        }
        //echo "<pre>"; print_r($logged_files); die;
        foreach ($logged_files as $key => $value)  {
            
            if($value->accept_policy == ""){
                $check = '<i class="fa fa-times cross" aria-hidden="true"></i></span>';
                $but   = '<button class="btn btn-success button-green accept_policy" file_id="'. $value->id.'" >Accept</button>';
            } else{
                $check = '<i class="fa fa-check tick" aria-hidden="true"></i></span>';
                $but   = '';
            }
            
            echo '<div class="form-group col-md-12 col-sm-12 col-xs-12 p-0 cog-panel delete-file">
                    <div class="col-md-8 col-sm-8 col-xs-8">
                        <div class="row">
                        <div class="col-md-1 ck">
                            <span >'.$check.'</span>
                            </div>
                           <div class="col-md-11 value-tx">
                            <a class="wrinkled" href="'.PoliciesFilePath.'/'.$value->file.'" target="_blank"> 
                            <span>'.ucfirst($value->file).'</span> </a>
                           </div>
                        </div>    
                    </div>    
                        <div class="col-sm-4 col-md-4 col-xs-4 pull-right">
                            <span>'.$but.'
                                  <button class="btn btn-danger delete del_policy" file_id="'.$value->id.'">Delete</button>  
                            </span>
                        </div>
                </div> ';
        }
        // echo '<div class="col-sm-6">';
        // echo $logged_files->links();
        //echo '</div>';
        if(!empty($logged_files)){
            echo '<div class="file_mngr_paginate m-l-15">';
            echo $logged_files->links();
            echo '</div>'; 
        }
    }

    public function add_multiple(Request $request)   
    {   
        if($request->isMethod('post'))  
        {
            $data = $request->all();
            /* echo '<pre>';
            print_r($data);
            print_r($_FILES);
            print_r($data['files']);
            die;*/
            $user_id = Auth::user()->id;

            if(!empty($_FILES['files']['name'])) {

                foreach($_FILES['files']['name'] as $key => $value){

                    $tmp_file   =   $_FILES['files']['tmp_name'][$key];
                    $image_info =   pathinfo($_FILES['files']['name'][$key]);
                    
                    //$file_name  =   substr($image_info['filename'],0,100);
                    $file_name  =   $image_info['filename'];
                    $ext        =   strtolower($image_info['extension']);
                    $new_name   =   $file_name.'.'.$ext;

                    $allowed_ext = array('jpg','jpeg','png','pdf','doc','docx','wps');
                    if(in_array($ext,$allowed_ext)){

                        $file_dest = base_path().PoliciesFileBasePath; 
                    
                        if(!is_dir($file_dest)) { //check if file directory not exits then create it
                            mkdir($file_dest);
                        } else{ //if directory exits check if any file with same name exists
                            
                            $i = 1;
                            while(file_exists($file_dest.'/'.$new_name)){ 
                                $i++;
                                $new_name = $file_name.$i.'.'.$ext;                                
                            }
                        }
                        
                        if(move_uploaded_file($tmp_file, $file_dest.'/'.$new_name)) {

                            $file                  = new Policies;
                            $file->user_id         = $user_id;
                            $file->file            = $new_name;
                            $file->home_id         = Auth::user()->home_id;
                            
                            if($file->save()){
                                $result[$key]['response']   = true;
                                $result[$key]['save_id']    = base64_encode(convert_uuencode($file->id));
                                $result[$key]['file_index'] = $key;
                                $result[$key]['file_name']  = $new_name;                                
                            } else{
                                $result[$key]['response'] = false;
                                $result[$key]['save_id'] = '';
                                $result[$key]['file_index'] = $key;
                                $result[$key]['file_name']  = $new_name;                                
                            }
                        }
                    } 

                    if(!isset($result[$key]['save_id'])){
                        $result[$key]['response'] = false;
                        $result[$key]['save_id'] = '';
                        $result[$key]['file_index'] = $key;
                    } 

                }
            }
            //echo '<pre>'; print_r($result);
            $result = array_values($result);

            return json_encode($result); 
        }
    }

    public function add_single(Request $request){
        
        $data = $request->input();
        $user_id = $data['user_id'];
        $save_id = ''; // last insert id 
        $new_name = '';
        
        $su_home_id = User::where('id',$user_id)->value('home_id');
        if(Auth::user()->home_id == $su_home_id){
       
            if(!empty($_FILES['file']['name']))
            {  
                $tmp_image  =   $_FILES['file']['tmp_name'];
                $image_info =   pathinfo($_FILES['file']['name']);
                $file_name  =   $image_info['filename'];
                $ext        =   strtolower($image_info['extension']);
                        
                $new_name   =   $file_name.'.'.$ext; 
                $allowed_ext = array('jpg','jpeg','png','pdf','doc','docx','wps');
                if(in_array($ext,$allowed_ext))
                {   
                    $file_dest = base_path().PoliciesFileBasePath; 
                
                    if(!is_dir($file_dest)) {
                        mkdir($file_dest);
                    } else{ //if directory exits check if any file with same name exists
                        
                        $i = 1;
                        while(file_exists($file_dest.'/'.$new_name)){ 
                            $i++;
                            $new_name = $file_name.$i.'.'.$ext;                                
                        }
                    }
                   
                    if(move_uploaded_file($tmp_image, $file_dest.'/'.$new_name))
                    {
                        $file                  = new Policies;
                        $file->user_id         = $user_id;
                        $file->file            = $new_name;
                        $file->home_id         = Auth::user()->home_id;
                        
                        if($file->save()) {
                            $save_id = base64_encode(convert_uuencode($file->id));
                        }        
                    }
                }
            }
        }
        
        if(!empty($save_id)) {
            $result['response'] = true;
            $result['save_id'] = $save_id;
            $result['file_name'] = $new_name;
        } else {
            $result['response'] = false;
            $result['save_id']  = $save_id;
            $result['file_name']= $new_name;
        }
        
        $result = json_encode($result);
        return $result;
    }

    public function delete($logged_file_id = null) 
    {   
        $deleted = '';
        if(!empty($logged_file_id)) {

            $logged_file_id = convert_uudecode(base64_decode($logged_file_id));

            $file_info = Policies::select('user_id','file')->where('id', $logged_file_id)->first();
            if(!empty($file_info)){
                $user_id = $file_info->user_id;

                $su_home_id = User::where('id',$user_id)->value('home_id');
                if(Auth::user()->home_id != $su_home_id){
                    return false; 
                }

                $file_name = $file_info->file;
                $file_dest = base_path().PoliciesFileBasePath; 
            
                if(file_exists($file_dest.'/'.$file_name)){
                    unlink($file_dest.'/'.$file_name);
                }
            
                $deleted = Policies::where('id', $logged_file_id)->delete();
            }

            if($deleted){
                return 'true';
            } else {
                return 'false';
            }            
        }
    }

    public function accept_policy($id=null){
        $accept_policy              = new UserAcceptedPolicy;
        $accept_policy->user_id     = Auth::user()->id;
        $accept_policy->policy_id = $id;
        $accept_policy->save();
        return $response = array('status'=>"OK");
        
    }

    public function delete_policy($policy_id=null){
        $updated = Policies::where('id',$policy_id)->update(['is_deleted'=>1]);
        if($updated){
            return 'true';
        }
    }

}
